{"version":3,"file":"js/Template-f5cec968.dda2353b.js","mappings":"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ACA,QACA,MACA,SACA,UACA,SACA,SACA,SACA,SACA,OACA,MACA,SACA,UACA,OACA,QACA,OACA,MACA,WACA,UACA,OACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,SACA,OACA,MACA,gBACA,qBACA,qBACA,iBACA,YACA,QACA,aACA,QACA,YACA,MACA,OACA,WACA,UACA,WACA,OACA,mBACA,aACA,UACA,YACA,MACA,SACA,UACA,MACA,OACA,OACA,OACA,QACA,SACA,SACA,eACA,gBACA,iBAGIC,EAAe,CACnBjC,QAAS,y0BAYTE,SAAU,4BACVgC,iBAAkBF,EAClB/B,QAAS,2BAGLkC,EAAoB,CACxB7D,UAAW,oBACXiB,UAAW,EACXO,SAAUmC,EACVhE,MAAOV,EACL,KACA,eACA,SACA,UACA,YACAO,EAAKgE,SACLZ,EAAU,WAGRkB,EAAsB,CAC1BD,EACAN,EACAJ,EACAb,EACA9C,EAAK+C,qBACLe,EACAD,GAIIU,EAAqB,CAIzB9D,SAAU,CACR,CACEN,MAAO,IACPC,IAAK,KAEP,CACED,MAAO,KACPC,IAAK,MAEP,CACEoE,cAAe,wBACfpE,IAAK,MAGT4B,SAAUmC,EACV9D,SAAUiE,EAAoB7E,OAAO,CACnC,CACEU,MAAO,KACPC,IAAK,KACL4B,SAAUmC,EACV9D,SAAUiE,EAAoB7E,OAAO,CAAE,SACvCgC,UAAW,KAGfA,UAAW,GAGPgD,EAAuB,CAC3BjE,UAAW,WACXL,MAAO,IAAMuD,EAAmB,eAAiBO,EACjDtC,aAAa,EACbvB,IAAK,QACLsE,YAAY,EACZ1C,SAAUmC,EACVzB,QAAS,iBACTrC,SAAU,CACR,CACEF,MAAOoD,EACPvB,SAAUmC,EACV1C,UAAW,GAEb,CACEtB,MAAO8D,EACPtC,aAAa,EACbtB,SAAU,CAAEwB,GACZJ,UAAW,GAIb,CACEtB,MAAO,KACPsB,UAAW,GAGb,CACEtB,MAAO,IACPwE,gBAAgB,EAChBtE,SAAU,CACRwD,EACAC,IAGJ,CACEtD,UAAW,SACXL,MAAO,KACPC,IAAK,KACL4B,SAAUmC,EACV1C,UAAW,EACXpB,SAAU,CACRyC,EACA9C,EAAK+C,qBACLc,EACAC,EACAH,EAEA,CACExD,MAAO,KACPC,IAAK,KACL4B,SAAUmC,EACV1C,UAAW,EACXpB,SAAU,CACR,OACAyC,EACA9C,EAAK+C,qBACLc,EACAC,EACAH,MAKRA,EACAb,EACA9C,EAAK+C,qBACLgB,IAIJ,MAAO,CACLjC,KAAM,MACNC,QAAS,CACP,KACA,MACA,MACA,MACA,KACA,MACA,OAEFC,SAAUmC,EACVzB,QAAS,KACTkC,iBAAkB,CAChB,oBAAqB,YAEvBvE,SAAU,GAAGZ,OACX8E,EACAE,EACAJ,EACAC,EACA,CACEP,EACA,CACE5D,MAAO,uKACPC,IAAK,IACL4B,SAAUmC,EACV9D,SAAU,CACR,OACAsD,IAGJ,CACExD,MAAOH,EAAKgE,SAAW,KACvBhC,SAAUmC,GAEZ,CACE3D,UAAW,QACXgE,cAAe,0BACfpE,IAAK,WACLC,SAAU,CACR,CACEmE,cAAe,sBAEjBxE,EAAK6B,eAIbU,QAAS,CACPsC,aAAcd,EACde,QAASjB,EACT7B,SAAUmC,GAGhB,CASA,SAASY,EAAM/E,GACb,MAAMgF,EAAO1B,EAAUtD,GAEjBiF,EAAY,CAChB,IACA,KAGIC,EAAc,CAClB,KACA,MACA,MACA,MACA,KACA,MACA,OAYF,OATAF,EAAKG,mBAAoB,EACzBH,EAAKjD,QAAU,GAEV/B,EAAKoF,YAAY,MAAMJ,EAAKjD,QAAQf,QAAQiE,GAC5CjF,EAAKoF,YAAY,QAAQJ,EAAKjD,QAAQf,QAAQkE,GAK5CF,CACT,CAEA1C,EAAOC,QAAUwC,C","sources":["webpack://vue2-vuetify2/./node_modules/highlight.js/lib/languages/bash.js","webpack://vue2-vuetify2/./node_modules/highlight.js/lib/languages/basic.js","webpack://vue2-vuetify2/./node_modules/highlight.js/lib/languages/bnf.js","webpack://vue2-vuetify2/./node_modules/highlight.js/lib/languages/brainfuck.js","webpack://vue2-vuetify2/./node_modules/highlight.js/lib/languages/c-like.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction bash(hljs) {\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end:/\\}/,\n    contains: [\n      \"self\",\n      {\n        begin: /:-/,\n        contains: [ VAR ]\n      } // default values\n    ]\n  };\n  Object.assign(VAR,{\n    className: 'variable',\n    variants: [\n      {begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/,\n        // negative look-ahead tries to avoid matching patterns that are not\n        // Perl at all like $ident$, @ident@, etc.\n        `(?![\\\\w\\\\d])(?![$])`) },\n      BRACED_VAR\n    ]\n  });\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: {\n      contains: [\n        hljs.END_SAME_AS_BEGIN({\n          begin: /(\\w+)/,\n          end: /(\\w+)/,\n          className: 'string'\n        })\n      ]\n    }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      SUBST\n    ]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    className: '',\n    begin: /\\\\\"/\n\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$\\(\\(/,\n    end: /\\)\\)/,\n    contains: [\n      { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\n      hljs.NUMBER_MODE,\n      VAR\n    ]\n  };\n  const SH_LIKE_SHELLS = [\n    \"fish\",\n    \"bash\",\n    \"zsh\",\n    \"sh\",\n    \"csh\",\n    \"ksh\",\n    \"tcsh\",\n    \"dash\",\n    \"scsh\",\n  ];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\n    relevance: 0\n  };\n\n  return {\n    name: 'Bash',\n    aliases: ['sh', 'zsh'],\n    keywords: {\n      $pattern: /\\b[a-z._-]+\\b/,\n      keyword:\n        'if then else elif fi for while in do done case esac function',\n      literal:\n        'true false',\n      built_in:\n        // Shell built-ins\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\n        'trap umask unset ' +\n        // Bash built-ins\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\n        'read readarray source type typeset ulimit unalias ' +\n        // Shell modifiers\n        'set shopt ' +\n        // Zsh built-ins\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\n        'zpty zregexparse zsocket zstyle ztcp'\n    },\n    contains: [\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n      FUNCTION,\n      ARITHMETIC,\n      hljs.HASH_COMMENT_MODE,\n      HERE_DOC,\n      QUOTE_STRING,\n      ESCAPED_QUOTE,\n      APOS_STRING,\n      VAR\n    ]\n  };\n}\n\nmodule.exports = bash;\n","/*\nLanguage: BASIC\nAuthor: Raphaël Assénat <raph@raphnet.net>\nDescription: Based on the BASIC reference from the Tandy 1000 guide\nWebsite: https://en.wikipedia.org/wiki/Tandy_1000\n*/\n\n/** @type LanguageFn */\nfunction basic(hljs) {\n  return {\n    name: 'BASIC',\n    case_insensitive: true,\n    illegal: '^\\.',\n    // Support explicitly typed variables that end with $%! or #.\n    keywords: {\n      $pattern: '[a-zA-Z][a-zA-Z0-9_$%!#]*',\n      keyword:\n        'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +\n        'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +\n        'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +\n        'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +\n        'HEX$ IF THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +\n        'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +\n        'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +\n        'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +\n        'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +\n        'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +\n        'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +\n        'WEND WIDTH WINDOW WRITE XOR'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('REM', '$', {\n        relevance: 10\n      }),\n      hljs.COMMENT('\\'', '$', {\n        relevance: 0\n      }),\n      {\n        // Match line numbers\n        className: 'symbol',\n        begin: '^[0-9]+ ',\n        relevance: 10\n      },\n      {\n        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)\n        className: 'number',\n        begin: '\\\\b\\\\d+(\\\\.\\\\d+)?([edED]\\\\d+)?[#\\!]?',\n        relevance: 0\n      },\n      {\n        // Match hexadecimal numbers (&Hxxxx)\n        className: 'number',\n        begin: '(&[hH][0-9a-fA-F]{1,4})'\n      },\n      {\n        // Match octal numbers (&Oxxxxxx)\n        className: 'number',\n        begin: '(&[oO][0-7]{1,6})'\n      }\n    ]\n  };\n}\n\nmodule.exports = basic;\n","/*\nLanguage: Backus–Naur Form\nWebsite: https://en.wikipedia.org/wiki/Backus–Naur_form\nAuthor: Oleg Efimov <efimovov@gmail.com>\n*/\n\n/** @type LanguageFn */\nfunction bnf(hljs) {\n  return {\n    name: 'Backus–Naur Form',\n    contains: [\n      // Attribute\n      {\n        className: 'attribute',\n        begin: /</,\n        end: />/\n      },\n      // Specific\n      {\n        begin: /::=/,\n        end: /$/,\n        contains: [\n          {\n            begin: /</,\n            end: />/\n          },\n          // Common\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.APOS_STRING_MODE,\n          hljs.QUOTE_STRING_MODE\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = bnf;\n","/*\nLanguage: Brainfuck\nAuthor: Evgeny Stepanischev <imbolk@gmail.com>\nWebsite: https://esolangs.org/wiki/Brainfuck\n*/\n\n/** @type LanguageFn */\nfunction brainfuck(hljs) {\n  const LITERAL = {\n    className: 'literal',\n    begin: /[+-]/,\n    relevance: 0\n  };\n  return {\n    name: 'Brainfuck',\n    aliases: ['bf'],\n    contains: [\n      hljs.COMMENT(\n        '[^\\\\[\\\\]\\\\.,\\\\+\\\\-<> \\r\\n]',\n        '[\\\\[\\\\]\\\\.,\\\\+\\\\-<> \\r\\n]',\n        {\n          returnEnd: true,\n          relevance: 0\n        }\n      ),\n      {\n        className: 'title',\n        begin: '[\\\\[\\\\]]',\n        relevance: 0\n      },\n      {\n        className: 'string',\n        begin: '[\\\\.,]',\n        relevance: 0\n      },\n      {\n        // this mode works as the only relevance counter\n        begin: /(?:\\+\\+|--)/,\n        contains: [LITERAL]\n      },\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = brainfuck;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const COMMON_CPP_HINTS = [\n    'asin',\n    'atan2',\n    'atan',\n    'calloc',\n    'ceil',\n    'cosh',\n    'cos',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'auto_ptr',\n    'deque',\n    'list',\n    'queue',\n    'stack',\n    'vector',\n    'map',\n    'set',\n    'pair',\n    'bitset',\n    'multiset',\n    'multimap',\n    'unordered_set',\n    'fscanf',\n    'future',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'tolower',\n    'toupper',\n    'labs',\n    'ldexp',\n    'log10',\n    'log',\n    'malloc',\n    'realloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'scanf',\n    'sinh',\n    'sin',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'tanh',\n    'tan',\n    'unordered_map',\n    'unordered_multiset',\n    'unordered_multimap',\n    'priority_queue',\n    'make_pair',\n    'array',\n    'shared_ptr',\n    'abort',\n    'terminate',\n    'abs',\n    'acos',\n    'vfprintf',\n    'vprintf',\n    'vsprintf',\n    'endl',\n    'initializer_list',\n    'unique_ptr',\n    'complex',\n    'imaginary',\n    'std',\n    'string',\n    'wstring',\n    'cin',\n    'cout',\n    'cerr',\n    'clog',\n    'stdin',\n    'stdout',\n    'stderr',\n    'stringstream',\n    'istringstream',\n    'ostringstream'\n  ];\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: '_Bool _Complex _Imaginary',\n    _relevance_hints: COMMON_CPP_HINTS,\n    literal: 'true false nullptr NULL'\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: \"function.dispatch\",\n    relevance: 0,\n    keywords: CPP_KEYWORDS,\n    begin: concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      lookahead(/\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      \"function.dispatch\": \"built_in\"\n    },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\n/*\nLanguage: C-like (deprecated, use C and C++ instead)\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  const lang = cPlusPlus(hljs);\n\n  const C_ALIASES = [\n    \"c\",\n    \"h\"\n  ];\n\n  const CPP_ALIASES = [\n    'cc',\n    'c++',\n    'h++',\n    'hpp',\n    'hh',\n    'hxx',\n    'cxx'\n  ];\n\n  lang.disableAutodetect = true;\n  lang.aliases = [];\n  // support users only loading c-like (legacy)\n  if (!hljs.getLanguage(\"c\")) lang.aliases.push(...C_ALIASES);\n  if (!hljs.getLanguage(\"cpp\")) lang.aliases.push(...CPP_ALIASES);\n\n  // if c and cpp are loaded after then they will reclaim these\n  // aliases for themselves\n\n  return lang;\n}\n\nmodule.exports = cLike;\n"],"names":["source","re","concat","args","joined","map","x","join","bash","hljs","VAR","BRACED_VAR","begin","end","contains","Object","assign","className","variants","SUBST","BACKSLASH_ESCAPE","HERE_DOC","starts","END_SAME_AS_BEGIN","QUOTE_STRING","push","ESCAPED_QUOTE","APOS_STRING","ARITHMETIC","NUMBER_MODE","SH_LIKE_SHELLS","KNOWN_SHEBANG","SHEBANG","binary","relevance","FUNCTION","returnBegin","inherit","TITLE_MODE","name","aliases","keywords","$pattern","keyword","literal","built_in","HASH_COMMENT_MODE","module","exports","basic","case_insensitive","illegal","QUOTE_STRING_MODE","COMMENT","bnf","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","APOS_STRING_MODE","brainfuck","LITERAL","returnEnd","lookahead","optional","cPlusPlus","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","CHARACTER_ESCAPES","STRINGS","NUMBERS","PREPROCESSOR","IDENT_RE","FUNCTION_TITLE","COMMON_CPP_HINTS","CPP_KEYWORDS","_relevance_hints","FUNCTION_DISPATCH","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","excludeEnd","endsWithParent","classNameAliases","preprocessor","strings","cLike","lang","C_ALIASES","CPP_ALIASES","disableAutodetect","getLanguage"],"sourceRoot":""}